<%- include("partials/_header") %>
    <div id="inputContainer">
        <div id="predictedLabelContainer"></div>
    </div>
    <div id="chartConatiner"></div>
    <div id="controlPanel">
        <button onclick="toggleInput()">
            Toggle Input
        </button>
    </div>
    <div id="container" style="margin: 50px 0px 0px;"></div>
    <script src="./common/js_objects/features.js"></script>
    <script src="./common/constants.js"></script>
    <script src="./common/utils.js"></script>
    <script src="./common/draw.js"></script>
    <script src="./common/featureFunctions.js"></script>


    <script src="./js/display.js"></script>
    <script src="./js/sketchPad.js"></script>


    <!-- <script src="https://www.gstatic.com/charts/loader.js"></script> -->
    <script src="./charts/graphics.js"></script>
    <script src="./charts/math.js"></script>
    <script src="./charts/chart.js"></script>

<script>
    const {samples,featureNames} = features;
    const groups = utils.groupBy(samples,"student_id");
    for(let student_id in groups){
        const samples = groups[student_id];
        const studentName = samples[0].student_name;
        createRow(container,studentName,samples);
    }

    const options = {
        size:500,
        axesLabels:featureNames,
        styles:utils.styles,
        transperancy:0.7,
        icon:"image"
    };
   graphics.generateImages(utils.styles);
   const chart = new Chart(
        chartConatiner,
        samples,
        options,
        handleClick
   );

   const sketchPad = new SketchPad(inputContainer,onDrawingUpdate);
   sketchPad.canvas.style.cssText+="outline: 10000px solid rgba(0,0,0,0.7);";
   function onDrawingUpdate(paths){
    const functions = featureFunctions.inUse.map(f=>f.function);
    point=functions.map(f=>f(paths));
        const {label,nearestSample} = classify(point);
        predictedLabelContainer.innerHTML=
            "Is it a " + label + " ?"; 
        chart.showDynamicPoint(point,label,nearestSample);
   }

   function classify(point){
       const samplePoints = samples.map(s=>s.point);
       const index = utils.getNearest(point,samplePoints);
       const nearestSample = samples[index];
       return {label: nearestSample.label, nearestSample};
   }
</script>
<%- include("partials/_footer") %>
